generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "forest"
  output   = "./ZARweb_erd.pdf"
}

enum UserType {
  HOME_OWNER
  SERVICE_PROVIDER
  MATERIAL_PROVIDER
  ADMIN
  SUPER_ADMIN
}

enum Status {
  PENDING
  LINKED
  AUTHORIZED
  VERIFIED
  UNVERIFIED
}

model User {
  id               String            @id @default(cuid())
  type             UserType
  email            String            @unique
  password         String            @default("DEFAULT")
  passcode         Int               @default(000000)
  is_admin         Boolean           @default(false)
  payment_link     String?
  status           Status
  HomeOwner        HomeOwner?
  ServiceProvider  ServiceProvider?
  MaterialProvider MaterialProvider?
}

model HomeOwner {
  id          String     @id @default(cuid())
  name        String
  mobile      String
  interest    String?
  profile_pic String?
  userId      String     @unique
  User        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Community   Community? @relation(fields: [communityId], references: [id])
  communityId String?
}

model ServiceProvider {
  id           String   @id @default(cuid())
  name         String
  mobile       String
  firm_name    String
  firm_address String
  country      String
  state        String
  city         String
  pincode      String
  bio          String
  profile_doc  String
  gallery      String[]
  profile_pic  String
  brand_logo   String?
  userId       String   @unique
  // subCategory    SubCategory  @relation(fields: [subCategoryId], references: [id])
  // subCategoryId  String
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  node         Node     @relation("ServiceProviderNode", fields: [nodeId], references: [id])
  nodeId       String
}

model MaterialProvider {
  id           String   @id @default(cuid())
  name         String
  mobile       String
  firm_name    String
  firm_address String
  bio          String
  profile_doc  String
  gallery      String[]
  profile_pic  String
  brand_logo   String?
  userId       String   @unique
  // subCategory       SubCategory @relation(fields: [subCategoryId], references: [id])
  // subCategoryId     String
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  node         Node     @relation("MaterialProviderNode", fields: [nodeId], references: [id])
  nodeId       String
}

model Node {
  id                String             @id @default(cuid())
  name              String
  description       String?
  background_img    String?
  parent            Node?              @relation("NodeHierarchy", fields: [parentId], references: [id])
  parentId          String?
  children          Node[]             @relation("NodeHierarchy")
  isService         Boolean            @default(false)
  serviceProviders  ServiceProvider[]  @relation("ServiceProviderNode")
  materialProviders MaterialProvider[] @relation("MaterialProviderNode")
  ServiceType       ServiceType?       @relation(fields: [serviceTypeId], references: [id])
  serviceTypeId     String?
}

model ServiceType {
  id             String  @id @default(cuid())
  name           String  @unique
  background_img String
  description    String
  is_live        Boolean @default(false)
  Node           Node[]
}

model Community {
  id         String      @id @default(cuid())
  name       String      @unique
  passcode   Int
  HomeOwners HomeOwner[]
}

// model Category {
//   id                String     @id @default(cuid())
//   name              String     @unique
//   description       String
//   background_img    String
//   serviceType       ServiceType @relation(fields: [serviceTypeId], references: [id], onDelete: Cascade)
//   serviceTypeId     String
//   nodes             Node[]     @relation("CategoryNodes")
// }

// model SubCategory {
//   id                String     @id @default(cuid())
//   name              String     @unique
//   description       String
//   background_img    String
//   category          Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
//   categoryId        String
//   nodes             Node[]    @relation("SubCategoryNodes")
// }
